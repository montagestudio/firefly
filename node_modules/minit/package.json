{
  "name": "minit",
  "version": "0.5.1",
  "title": "Montage Assistant",
  "homepage": "http://www.montage.org",
  "bugs": {
    "url": "http://github.com/montagejs/minit/issues"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/montagejs/minit.git"
  },
  "licenses": [
    {
      "type": "BSD",
      "url": "http://github.com/montagejs/minit/raw/master/LICENSE.md"
    }
  ],
  "main": "main.js",
  "dependencies": {
    "commander": "~1.1.1",
    "q": "~1.0.0",
    "q-io": "~1.10",
    "npm": "~1.3.7",
    "minidom": "~0.1.0",
    "diacritics": "1.1.0",
    "joey": "~1.3.3"
  },
  "devDependencies": {
    "jasmine-node": "~1.7.0",
    "sandboxed-module": "~0.2.0",
    "mocks": "~0.0.11"
  },
  "engines": {
    "node": "~0.10.2"
  },
  "bin": {
    "minit": "minit"
  },
  "scripts": {
    "test": "node run-test.js"
  },
  "preferGlobal": true,
  "readme": "[![Build Status](https://travis-ci.org/montagejs/minit.png?branch=master)](http://travis-ci.org/montagejs/minit)\n\nMinit â€“ the Montage Initializer\n===============================\n\nMinit helps you build [Montage](http://montagejs.org/) applications by generating template applications and components for you.\n\nUsage\n-----\n\nRun `minit` with your chosen template inside the directory you wish to create the template in. Templates such as \"component\" will search for a `package.json` and place their generated files in the correct directory underneath it, in this case `ui/`\n\nRun `minit --help` for details of the templates available and their usages. The templates are defined in the [templates directory](https://github.com/montagejs/minit/tree/master/templates).\n\n```bash\n~$ minit --help\n\n  Usage: minit [options] [command]\n\n  Commands:\n\n    create:app [options]\n    create:component [options]\n    create:package [options]\n    create:package-json [options]\n    create:test [options]\n\n  Options:\n\n    -h, --help                  output usage information\n    -V, --version               output the version number\n```\n\n```bash\n~$ minit create:app --help\n\n  Usage: create:app [options]\n\n  Options:\n\n    -h, --help              output usage information\n    -n, --name <name>       application name\n    -p, --package-home [path]   package home\n    -d, --destination [path]    where the template will be expanded relative to the package-home\n    -c, --copyright [path]  copyright file\n```\n\n```bash\n~$ minit create:package --help\n\n  Usage: create:package [options]\n\n  Options:\n\n    -h, --help              output usage information\n    -n, --name <name>       package name\n    -p, --package-home [path]   package home\n    -d, --destination [path]    where the template will be expanded relative to the package-home\n    -c, --copyright [path]  copyright file\n```\n\n```bash\n~$ minit create:component --help\n\n  Usage: create:component [options]\n\n  Options:\n\n    -h, --help                  output usage information\n    -n, --name <name>           module name\n    -p, --package-home [path]   package home\n    -d, --destination [path]    where the template will be expanded relative to the package-home\n    -e, --exported-name [name]  exported name\n    -j, --jsdoc [module]        jsdoc module\n    -c, --copyright [path]      copyright file\n```\n\n```bash\n~$ minit create:package-json --help\n\n  Usage: create:package-json [options]\n\n  Options:\n\n    -h, --help                 output usage information\n    -n, --name <name>          package name\n    -p, --package-home [path]   package home\n    -d, --destination [path]    where the template will be expanded relative to the package-home\n    -a, --author [name]        author\n    -m, --montage-path [name]  path to montage\n```\n\n```bash\n~$ minit create:spec --help\n\n  Usage: create:spec [options]\n\n  Options:\n\n    -h, --help                 output usage information\n    -p, --package-home [path]  absolute path to the package's home directory\n    -d, --destination [path]   where the template will be expanded relative to the package-home's test directory\n    -n, --name <name>          module name\n    -t, --title [name]         title of the test\n```\n\n```bash\n~$ minit create:test --help\n\n  Usage: create:test [options]\n\n  Options:\n\n    -h, --help                 output usage information\n    -p, --package-home [path]  absolute path to the package's home directory\n    -d, --destination [path]   where the template will be expanded relative to the package-home's test directory\n    -n, --name <name>          module name\n    -t, --title [name]         title of the test\n```\n\nUsing minit as a package\n-----\n\nThe minit package exports a create function that accepts a template name and an options object. The available options\nare the same as the command line options except that they are camel cased (--package-home becomes packageHome).\nThe create function returns a promise.\n\n```javascript\nvar minitCreate = require(\"minit\").create;\n\nminitCreate(templateName, options).done();\n\n```\n\n",
  "readmeFilename": "README.markdown",
  "description": "[![Build Status](https://travis-ci.org/montagejs/minit.png?branch=master)](http://travis-ci.org/montagejs/minit)",
  "_id": "minit@0.5.1",
  "_from": "minit@~0.5.1"
}
